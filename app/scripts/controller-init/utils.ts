import { createProjectLogger } from '@metamask/utils';
import {
  ActionConstraint,
  ControllerMessenger,
  EventConstraint,
} from '@metamask/base-controller';
import {
  BaseRestrictedControllerMessenger,
  ControllerInit,
  ControllerInitRequest,
  ControllerName,
} from './types';

const log = createProjectLogger('controller-init');

type Controller = { name: string };

type BaseInitRequest = ControllerInitRequest<
  BaseRestrictedControllerMessenger,
  BaseRestrictedControllerMessenger
>;

type InitFunction = (request: BaseInitRequest) => Controller;

type InitInstance = ControllerInit<
  Controller,
  BaseRestrictedControllerMessenger,
  BaseRestrictedControllerMessenger
>;

type InitObject = InitFunction | InitInstance;

/**
 * Adapter class to handle legacy controllers that are returned from a function.
 */
class LegacyControllerInit extends ControllerInit<
  Controller,
  BaseRestrictedControllerMessenger,
  BaseRestrictedControllerMessenger
> {
  #fn: InitFunction;

  constructor(fn: InitFunction) {
    super();
    this.#fn = fn;
  }

  init(_request: BaseInitRequest): Controller {
    return this.#fn(_request);
  }
}

/** Result of initializing controllers. */
export type InitControllersResult = {
  /** All API methods exposed by the controllers. */
  controllerApi: Record<string, Controller>;

  /** All controllers that provided a memory state key. */
  controllerMemState: Record<string, Controller>;

  /** All controllers that provided a persisted state key. */
  controllerPersistedState: Record<string, Controller>;

  /** All initialized controllers keyed by name. */
  controllersByName: Record<string, Controller>;
};

/**
 * Initialize the controllers according to the provided init objects.
 * Each init object can be a function that returns a controller, or a `ControllerInit` instance.
 *
 * @param options - Options bag.
 * @param options.baseControllerMessenger - Unrestricted base controller messenger.
 * @param options.initObjects - Array of init instances and functions.
 * @param options.initRequest - Base request used to initialize the controllers.
 * Excluding the properties that are generated by this function.
 * @returns The initialized controllers and associated data.
 */
export function initControllers({
  baseControllerMessenger,
  initObjects,
  initRequest,
}: {
  baseControllerMessenger: ControllerMessenger<
    ActionConstraint,
    EventConstraint
  >;
  initObjects: InitObject[];
  initRequest: Omit<
    BaseInitRequest,
    'getController' | 'controllerMessenger' | 'initMessenger'
  >;
}): InitControllersResult {
  log('Initializing controllers', initObjects.length);

  const initInstances = initObjects.map((initObject) =>
    (initObject as InitInstance).init
      ? (initObject as InitInstance)
      : new LegacyControllerInit(initObject as InitFunction),
  );

  const controllersByName: Record<string, Controller> = {};
  const controllerPersistedState: Record<string, Controller> = {};
  const controllerMemState: Record<string, Controller> = {};
  let controllerApi = {};

  const getController = <T>(name: ControllerName) =>
    getControllerOrThrow<T>(controllersByName, name);

  for (const initInstance of initInstances) {
    const messengerCallback = initInstance.getControllerMessengerCallback();
    const initCallback = initInstance.getInitMessengerCallback();
    const controllerMessenger = messengerCallback?.(baseControllerMessenger);
    const initMessenger = initCallback?.(baseControllerMessenger);

    const finalInitRequest: BaseInitRequest = {
      ...initRequest,
      controllerMessenger,
      getController,
      initMessenger,
    };

    const controller = initInstance.init(finalInitRequest);
    const { name } = controller;

    controllersByName[name] = controller;

    const getApiRequest = {
      controller,
      getFlatState: initRequest.getFlatState,
    };

    const api = initInstance.getApi(getApiRequest);

    controllerApi = {
      ...controllerApi,
      ...api,
    };

    const persistedStateKey = initInstance.getPersistedStateKey?.(controller);
    const memStateKey = initInstance.getMemStateKey?.(controller);

    if (persistedStateKey) {
      controllerPersistedState[persistedStateKey] = controller;
    }

    if (memStateKey) {
      controllerMemState[memStateKey] = controller;
    }

    log('Initialized controller', name, {
      api: Object.keys(api),
      persistedStateKey,
      memStateKey,
    });
  }

  return {
    controllerApi,
    controllerMemState,
    controllerPersistedState,
    controllersByName,
  };
}

function getControllerOrThrow<T>(
  controllersByName: Record<ControllerName, Controller>,
  name: ControllerName,
): T {
  const controller = controllersByName[name];

  if (!controller) {
    throw new Error(`Controller requested before it was initialized: ${name}`);
  }

  return controller as T;
}
