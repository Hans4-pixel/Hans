const fs = require('fs');

const STATE_PROPERTIES_TO_CONTROLLER_MAP = {
  internalAccounts: 'AccountsController',
  accounts: 'AccountTracker',
  accountsByChainId: 'AccountTracker',
  currentBlockGasLimit: 'AccountTracker',
  currentBlockGasLimitByChainId: 'AccountTracker',
  addressBook: 'AddressBookController',
  alertEnabledness: 'AlertController',
  unconnectedAccountAlertShownOrigins: 'AlertController',
  web3ShimUsageOrigins: 'AlertController',
  announcements: 'AnnouncementController',
  isSignedIn: 'AuthenticationController',
  orderedNetworkList: 'NetworkOrderController',
  pinnedAccountList: 'AccountOrderController',
  hiddenAccountList: 'AccountOrderController',
  currentAppVersion: 'AppMetadataController',
  currentMigrationVersion: 'AppMetadataController',
  previousAppVersion: 'AppMetadataController',
  previousMigrationVersion: 'AppMetadataController',
  approvalFlows: 'ApprovalController',
  pendingApprovals: 'ApprovalController',
  pendingApprovalCount: 'ApprovalController',
  browserEnvironment: 'AppStateController',
  connectedStatusPopoverHasBeenShown: 'AppStateController',
  currentPopupId: 'AppStateController',
  onboardingDate: 'AppStateController',
  currentExtensionPopupId: 'AppStateController',
  defaultHomeActiveTabName: 'AppStateController',
  fullScreenGasPollTokens: 'AppStateController',
  hadAdvancedGasFeesSetPriorToMigration92_3: 'AppStateController',
  nftsDetectionNoticeDismissed: 'AppStateController',
  nftsDropdownState: 'AppStateController',
  notificationGasPollTokens: 'AppStateController',
  outdatedBrowserWarningLastShown: 'AppStateController',
  popupGasPollTokens: 'AppStateController',
  qrHardware: 'AppStateController',
  recoveryPhraseReminderHasBeenShown: 'AppStateController',
  recoveryPhraseReminderLastShown: 'AppStateController',
  showBetaHeader: 'AppStateController',
  showPermissionsTour: 'AppStateController',
  showNetworkBanner: 'AppStateController',
  showAccountBanner: 'AppStateController',
  switchedNetworkDetails: 'AppStateController',
  switchedNetworkNeverShowMessage: 'AppStateController',
  showTestnetMessageInDropdown: 'AppStateController',
  surveyLinkLastClickedOrClosed: 'AppStateController',
  snapsInstallPrivacyWarningShown: 'AppStateController',
  termsOfUseLastAgreed: 'AppStateController',
  timeoutMinutes: 'AppStateController',
  trezorModel: 'AppStateController',
  newPrivacyPolicyToastClickedOrClosed: 'AppStateController',
  newPrivacyPolicyToastShownDate: 'AppStateController',
  balances: 'MultichainBalancesController',
  bridgeState: 'BridgeController',
  bridgeStatusState: 'BridgeStatusController',
  jobs: 'CronjobController',
  currentCurrency: 'CurrencyController',
  currencyRates: 'CurrencyController',
  unapprovedDecryptMsgs: 'DecryptMessageController',
  unapprovedDecryptMsgCount: 'DecryptMessageController',
  unapprovedEncryptionPublicKeyMsgs: 'EncryptionPublicKeyController',
  unapprovedEncryptionPublicKeyMsgCount: 'EncryptionPublicKeyController',
  ensResolutionsByAddress: 'EnsController',
  ensEntries: 'EnsController',
  estimatedGasFeeTimeBounds: 'GasFeeController',
  gasEstimateType: 'GasFeeController',
  gasFeeEstimates: 'GasFeeController',
  gasFeeEstimatesByChainId: 'GasFeeController',
  nonRPCGasFeeApisDisabled: 'GasFeeController',
  isUnlocked: 'KeyringController',
  keyrings: 'KeyringController',
  logs: 'LoggingController',
  subscriptionAccountsSeen: 'NotificationServicesController',
  isMetamaskNotificationsFeatureSeen: 'NotificationServicesController',
  isNotificationServicesEnabled: 'NotificationServicesController',
  isFeatureAnnouncementsEnabled: 'NotificationServicesController',
  metamaskNotificationsList: 'NotificationServicesController',
  metamaskNotificationsReadList: 'NotificationServicesController',
  isCheckingAccountsPresence: 'NotificationServicesController',
  isFetchingMetamaskNotifications: 'NotificationServicesController',
  isUpdatingMetamaskNotifications: 'NotificationServicesController',
  isUpdatingMetamaskNotificationsAccount: 'NotificationServicesController',
  eventsBeforeMetricsOptIn: 'MetaMetricsController',
  fragments: 'MetaMetricsController',
  metaMetricsId: 'MetaMetricsController',
  participateInMetaMetrics: 'MetaMetricsController',
  previousUserTraits: 'MetaMetricsController',
  segmentApiCalls: 'MetaMetricsController',
  traits: 'MetaMetricsController',
  dataCollectionForMarketing: 'MetaMetricsController',
  marketingCampaignCookieId: 'MetaMetricsController',
  latestNonAnonymousEventTimestamp: 'MetaMetricsController',
  metaMetricsDataDeletionId: 'MetaMetricsDataDeletionController',
  metaMetricsDataDeletionTimestamp: 'MetaMetricsDataDeletionController',
  names: 'NameController',
  nameSources: 'NameController',
  useExternalNameSources: 'NameController',
  networkConfigurations: 'NetworkController',
  networksMetadata: 'NetworkController',
  selectedNetworkClientId: 'NetworkController',
  allNftContracts: 'NftController',
  allNfts: 'NftController',
  ignoredNfts: 'NftController',
  completedOnboarding: 'OnboardingController',
  firstTimeFlowType: 'OnboardingController',
  onboardingTabs: 'OnboardingController',
  seedPhraseBackedUp: 'OnboardingController',
  securityAlertsEnabled: 'PPOMController',
  storageMetadata: 'PPOMController',
  versionInfo: 'PPOMController',
  subjects: 'PermissionController',
  permissionActivityLog: 'PermissionLogController',
  permissionHistory: 'PermissionLogController',
  advancedGasFee: 'PreferencesController',
  currentLocale: 'PreferencesController',
  dismissSeedBackUpReminder: 'PreferencesController',
  overrideContentSecurityPolicyHeader: 'PreferencesController',
  featureFlags: 'PreferencesController',
  forgottenPassword: 'PreferencesController',
  identities: 'PreferencesController',
  incomingTransactionsPreferences: 'PreferencesController',
  isIpfsGatewayEnabled: 'PreferencesController',
  ipfsGateway: 'PreferencesController',
  knownMethodData: 'PreferencesController',
  ledgerTransportType: 'PreferencesController',
  lostIdentities: 'PreferencesController',
  openSeaEnabled: 'PreferencesController',
  preferences: 'PreferencesController',
  useExternalServices: 'PreferencesController',
  selectedAddress: 'PreferencesController',
  snapRegistryList: 'PreferencesController',
  theme: 'PreferencesController',
  signatureSecurityAlertResponses: 'PreferencesController',
  use4ByteResolution: 'PreferencesController',
  useAddressBarEnsResolution: 'PreferencesController',
  useBlockie: 'PreferencesController',
  useCurrencyRateCheck: 'PreferencesController',
  useMultiAccountBalanceChecker: 'PreferencesController',
  useNftDetection: 'PreferencesController',
  useNonceField: 'PreferencesController',
  usePhishDetect: 'PreferencesController',
  useTokenDetection: 'PreferencesController',
  useRequestQueue: 'PreferencesController',
  useTransactionSimulations: 'PreferencesController',
  enableMV3TimestampSave: 'PreferencesController',
  useSafeChainsListValidation: 'PreferencesController',
  watchEthereumAccountEnabled: 'PreferencesController',
  bitcoinSupportEnabled: 'PreferencesController',
  bitcoinTestnetSupportEnabled: 'PreferencesController',
  addSnapAccountEnabled: 'PreferencesController',
  snapsAddSnapAccountModalDismissed: 'PreferencesController',
  remoteFeatureFlags: 'RemoteFeatureFlagController',
  cacheTimestamp: 'RemoteFeatureFlagController',
  fcmToken: 'NotificationServicesPushController',
  fiatCurrency: 'MultichainRatesController',
  rates: 'MultichainRatesController',
  cryptocurrencies: 'MultichainRatesController',
  queuedRequestCount: 'QueuedRequestController',
  domains: 'SelectedNetworkController',
  unapprovedPersonalMsgCount: 'SignatureController',
  unapprovedPersonalMsgs: 'SignatureController',
  unapprovedTypedMessages: 'SignatureController',
  unapprovedTypedMessagesCount: 'SignatureController',
  smartTransactionsState: 'SmartTransactionsController',
  snaps: 'SnapController',
  interfaces: 'SnapInterfaceController',
  insights: 'SnapInsightsController',
  database: 'SnapsRegistry',
  lastUpdated: 'SnapsRegistry',
  databaseUnavailable: 'SnapsRegistry',
  subjectMetadata: 'SubjectMetadataController',
  swapsState: 'SwapsController',
  tokenBalances: 'TokenBalancesController',
  allDetectedTokens: 'TokensController',
  allIgnoredTokens: 'TokensController',
  allTokens: 'TokensController',
  detectedTokens: 'TokensController',
  ignoredTokens: 'TokensController',
  tokens: 'TokensController',
  lastFetchedBlockNumbers: 'TxController',
  methodData: 'TxController',
  transactions: 'TxController',
  userOperations: 'UserOperationController',
  isProfileSyncingEnabled: 'UserStorageController',
  isProfileSyncingUpdateLoading: 'UserStorageController',
  hasAccountSyncingSyncedAtLeastOnce: 'UserStorageController',
  isAccountSyncingReadyToBeDispatched: 'UserStorageController',
  configurationClient: 'MMIConfigurationController',
  // opts: 'MMIController',
};

function unflattenMetamask(inputFilePath) {
  const data = JSON.parse(fs.readFileSync(inputFilePath, 'utf8'));
  const { metamask } = data;
  const unflattened = {};

  for (const [key, value] of Object.entries(metamask)) {
    const controller = STATE_PROPERTIES_TO_CONTROLLER_MAP[key];
    if (controller) {
      if (!unflattened[controller]) {
        unflattened[controller] = {};
      }
      unflattened[controller][key] = value;
    } else {
      console.warn(`No controller found for key: ${key}`);
    }
  }

  data.metamask = unflattened;
  console.log(data);
  fs.writeFileSync(inputFilePath, JSON.stringify(data, null, 2));
}

if (require.main === module) {
  const inputFilePath = process.argv[2];
  if (inputFilePath) {
    unflattenMetamask(inputFilePath);
  } else {
    console.error('No input file path provided.');
  }
}
